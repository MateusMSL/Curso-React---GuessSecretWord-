{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kirin\\\\OneDrive\\\\Documentos\\\\Arquivos Importantes\\\\Arquivos NODE\\\\Aula_06 - Secret Word\\\\secretword\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// CSS\nimport './App.css';\n\n// React\nimport { useCallback, useEffect, useState } from 'react';\n\n// Componentes\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\n\n// Data\nimport { wordList, wordsList } from './data/words';\n\n// Array que define o estado atual da página\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 1,\n  name: \"start\"\n}, {\n  id: 2,\n  name: \"game\"\n}, {\n  id: 3,\n  name: \"end\"\n}];\nfunction App() {\n  _s();\n  // Define o estado inicial como 0\n  const [gameStage, setGameStage] = useState(stages[0].name);\n\n  /* Define 'words, pickedword, picketcategory e letters' como \"\", \n  até que o usuario inicie o jogo e depois com o que esta armazenado em wordslist */\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const pickWordAndCategory = () => {\n    // Seleciona uma categoria aleatória\n    const categories = Object.keys(words); // vai no componente words e pega a chave\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)]; // escolhe uma chave aleatória de words e define\n\n    // Seleciona uma palavra aleatória\n    const word = words[category][Math.floor(Math.random() * words[category].length)]; // escolhe uma palavra aleatoria da chave escolhida anteriormente\n\n    return {\n      word,\n      category\n    };\n  };\n  // Inicia o jogo\n  const startGame = () => {\n    // pick word and category\n    const {\n      word,\n      category\n    } = pickWordAndCategory();\n\n    // criar array de letras\n    let wordLetters = word.split(\"\");\n    wordLetters = wordLetters.map(l => l.toLowerCase());\n    console.log(word, category);\n    console.log(wordLetters);\n\n    // fill states\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(letters);\n    setGameStage(stages[1].name);\n  };\n\n  // detecta a letra digitada\n  const verifyLetter = () => {\n    setGameStage(stages[2].name);\n  };\n\n  // Reinicia o jogo\n  const retry = () => {\n    setGameStage(stages[0].name);\n  };\n  console.log(words);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === \"start\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 34\n    }, this), gameStage === \"game\" && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 33\n    }, this), gameStage === \"end\" && /*#__PURE__*/_jsxDEV(GameOver, {\n      retry: retry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"b3Tc6r+vXxxv/jHXERN8pXpeA9A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","StartScreen","Game","GameOver","wordList","wordsList","jsxDEV","_jsxDEV","stages","id","name","App","_s","gameStage","setGameStage","words","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","word","startGame","wordLetters","split","map","l","toLowerCase","console","log","verifyLetter","retry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kirin/OneDrive/Documentos/Arquivos Importantes/Arquivos NODE/Aula_06 - Secret Word/secretword/src/App.js"],"sourcesContent":["// CSS\nimport './App.css';\n\n// React\nimport { useCallback, useEffect, useState } from 'react';\n\n// Componentes\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\n\n// Data\nimport { wordList, wordsList } from './data/words';\n\n\n// Array que define o estado atual da página\nconst stages = [\n  { id:1, name: \"start\" },\n  { id:2, name: \"game\" },\n  { id:3, name: \"end\" }, \n  ]\n\n\nfunction App() {\n\n  // Define o estado inicial como 0\n  const [gameStage, setGameStage ] = useState(stages[0].name);\n  \n  /* Define 'words, pickedword, picketcategory e letters' como \"\", \n  até que o usuario inicie o jogo e depois com o que esta armazenado em wordslist */\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n\n\n  const pickWordAndCategory = () => {\n\n    // Seleciona uma categoria aleatória\n    const categories = Object.keys(words) // vai no componente words e pega a chave\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)]; // escolhe uma chave aleatória de words e define\n\n    // Seleciona uma palavra aleatória\n    const word = words[category][Math.floor(Math.random() * words[category].length)]; // escolhe uma palavra aleatoria da chave escolhida anteriormente\n\n    return{word, category}\n  }\n  // Inicia o jogo\n  const startGame = () => {\n    \n    // pick word and category\n    const {word, category } = pickWordAndCategory();\n\n    // criar array de letras\n    let wordLetters = word.split(\"\");\n    wordLetters = wordLetters.map((l) => l.toLowerCase())\n    \n    console.log(word, category);\n    console.log(wordLetters);\n\n\n    // fill states\n    setPickedWord(word)\n    setPickedCategory(category)\n    setLetters(letters);\n\n    \n    setGameStage(stages[1].name);\n  };\n\n  // detecta a letra digitada\n  const verifyLetter = () => {\n    setGameStage(stages[2].name);\n  }\n\n  // Reinicia o jogo\n  const retry = () => {\n    setGameStage(stages[0].name);\n  }\n\n  console.log(words);\n  \n  return (\n    <div className=\"App\">\n      { gameStage === \"start\" && <StartScreen startGame={startGame}/> }\n      { gameStage === \"game\" && <Game verifyLetter={verifyLetter}/> }\n      { gameStage === \"end\" && <GameOver retry={retry}/> }\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}