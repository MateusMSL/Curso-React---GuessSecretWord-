{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kirin\\\\OneDrive\\\\Documentos\\\\Arquivos Importantes\\\\Arquivos NODE\\\\Aula_06 - Secret Word\\\\secretword\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\n\n// components\nimport StartScreen from \"./components/StartScreen\";\nimport Game from \"./components/Game\";\nimport GameOver from \"./components/GameOver\";\n\n// styles\nimport \"./App.css\";\n\n// data\nimport { wordsList } from \"./data/words\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 1,\n  name: \"start\"\n}, {\n  id: 2,\n  name: \"game\"\n}, {\n  id: 3,\n  name: \"end\"\n}];\nfunction App() {\n  _s();\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(3);\n  const [score, setScore] = useState(0);\n  console.log(words);\n  const pickWordAndCategory = useCallback(() => {\n    // pick a random category\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)];\n\n    // pick a random word\n    const word = words[category][Math.floor(Math.random() * words[category].length)];\n    console.log(category, word);\n    return {\n      category,\n      word\n    };\n  }, [words]);\n\n  // start the game\n  const startGame = useCallback(() => {\n    // clear all letters\n    clearLettersStates();\n\n    // choose a word\n    const {\n      category,\n      word\n    } = pickWordAndCategory();\n    console.log(category, word);\n    let wordLetters = word.split(\"\");\n    wordLetters = wordLetters.map(l => l.toLowerCase());\n\n    // console.log(category, word);\n\n    setPickedCategory(category);\n    setPickedWord(word);\n    setLetters(wordLetters);\n    setGameStage(stages[1].name);\n  }, [pickWordAndCategory]);\n\n  // process letter input\n  const verifyLetter = letter => {\n    const normalizedLetter = letter.toLowerCase();\n\n    // check if letter has already been utilized\n    if (guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter)) {\n      return;\n    }\n\n    // push guessed letter or remove a chance\n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters(actualGuessedLetters => [...actualGuessedLetters, letter]);\n    } else {\n      setWrongLetters(actualWrongLetters => [...actualWrongLetters, normalizedLetter]);\n      setGuesses(actualGuesses => actualGuesses - 1);\n    }\n  };\n  console.log(wrongLetters);\n\n  // restart the game\n  const retry = () => {\n    setScore(0);\n    setGuesses(3);\n    setGameStage(stages[0].name);\n  };\n\n  // clear letters state\n  const clearLettersStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n\n  // check if guesses ended\n  useEffect(() => {\n    if (guesses === 0) {\n      // game over and reset all states\n      clearLettersStates();\n      setGameStage(stages[2].name);\n    }\n  }, [guesses]);\n\n  // check win condition\n  useEffect(() => {\n    const uniqueLetters = [...new Set(letters)];\n    console.log(uniqueLetters);\n    console.log(guessedLetters);\n\n    // win condition\n    if (guessedLetters.length === uniqueLetters.length) {\n      // add score\n      setScore(actualScore => actualScore += 100);\n\n      // restart game with new word\n      startGame();\n    }\n  }, [guessedLetters, letters, startGame]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === \"start\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }, this), gameStage === \"game\" && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter,\n      pickedWord: pickedWord,\n      pickedCategory: pickedCategory,\n      letters: letters,\n      guessedLetters: guessedLetters,\n      wrongLetters: wrongLetters,\n      guesses: guesses,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), gameStage === \"end\" && /*#__PURE__*/_jsxDEV(GameOver, {\n      retry: retry,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OVFP6UZ8JOWVVMoS+3RdQ6uwNa8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","StartScreen","Game","GameOver","wordsList","jsxDEV","_jsxDEV","stages","id","name","App","_s","gameStage","setGameStage","words","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","guessedLetters","setGuessedLetters","wrongLetters","setWrongLetters","guesses","setGuesses","score","setScore","console","log","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","word","startGame","clearLettersStates","wordLetters","split","map","l","toLowerCase","verifyLetter","letter","normalizedLetter","includes","actualGuessedLetters","actualWrongLetters","actualGuesses","retry","uniqueLetters","Set","actualScore","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kirin/OneDrive/Documentos/Arquivos Importantes/Arquivos NODE/Aula_06 - Secret Word/secretword/src/App.js"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\n// components\nimport StartScreen from \"./components/StartScreen\";\nimport Game from \"./components/Game\";\nimport GameOver from \"./components/GameOver\";\n\n// styles\nimport \"./App.css\";\n\n// data\nimport { wordsList } from \"./data/words\";\n\nconst stages = [\n  { id: 1, name: \"start\" },\n  { id: 2, name: \"game\" },\n  { id: 3, name: \"end\" },\n];\n\nfunction App() {\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  \n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(3);\n  const [score, setScore] = useState(0);\n\n  console.log(words);\n\n  const pickWordAndCategory = useCallback(() => {\n    // pick a random category\n    const categories = Object.keys(words);\n    const category =\n      categories[Math.floor(Math.random() * Object.keys(categories).length)];\n\n    // pick a random word\n    const word =\n      words[category][Math.floor(Math.random() * words[category].length)];\n\n    console.log(category, word);\n\n    return { category, word };\n  }, [words]);\n\n  // start the game\n  const startGame = useCallback(() => {\n    // clear all letters\n    clearLettersStates();\n\n    // choose a word\n    const { category, word } = pickWordAndCategory();\n\n    console.log(category, word);\n\n    let wordLetters = word.split(\"\");\n\n    wordLetters = wordLetters.map((l) => l.toLowerCase());\n\n    // console.log(category, word);\n\n    setPickedCategory(category);\n    setPickedWord(word);\n    setLetters(wordLetters);\n\n    setGameStage(stages[1].name);\n  }, [pickWordAndCategory]);\n\n  // process letter input\n  const verifyLetter = (letter) => {\n    const normalizedLetter = letter.toLowerCase();\n\n    // check if letter has already been utilized\n    if (\n      guessedLetters.includes(normalizedLetter) ||\n      wrongLetters.includes(normalizedLetter)\n    ) {\n      return;\n    }\n\n    // push guessed letter or remove a chance\n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters((actualGuessedLetters) => [\n        ...actualGuessedLetters,\n        letter,\n      ]);\n    } else {\n      setWrongLetters((actualWrongLetters) => [\n        ...actualWrongLetters,\n        normalizedLetter,\n      ]);\n\n      setGuesses((actualGuesses) => actualGuesses - 1);\n    }\n  };\n\n  console.log(wrongLetters);\n\n  // restart the game\n  const retry = () => {\n    setScore(0);\n    setGuesses(3);\n    setGameStage(stages[0].name);\n  };\n\n  // clear letters state\n  const clearLettersStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n\n  // check if guesses ended\n  useEffect(() => {\n    if (guesses === 0) {\n      // game over and reset all states\n      clearLettersStates();\n\n      setGameStage(stages[2].name);\n    }\n  }, [guesses]);\n\n  // check win condition\n  useEffect(() => {\n    const uniqueLetters = [...new Set(letters)];\n\n    console.log(uniqueLetters);\n    console.log(guessedLetters);\n\n    // win condition\n    if (guessedLetters.length === uniqueLetters.length) {\n      // add score\n      setScore((actualScore) => (actualScore += 100));\n\n      // restart game with new word\n      startGame();\n    }\n  }, [guessedLetters, letters, startGame]);\n\n  return (\n    <div className=\"App\">\n      {gameStage === \"start\" && <StartScreen startGame={startGame} />}\n      {gameStage === \"game\" && (\n        <Game\n          verifyLetter={verifyLetter}\n          pickedWord={pickedWord}\n          pickedCategory={pickedCategory}\n          letters={letters}\n          guessedLetters={guessedLetters}\n          wrongLetters={wrongLetters}\n          guesses={guesses}\n          score={score}\n        />\n      )}\n      {gameStage === \"end\" && <GameOver retry={retry} score={score} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}